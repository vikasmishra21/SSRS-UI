import { Component, OnInit } from '@angular/core';
import { OrdersService } from "../../_services/orders.service";
import { Router, RouterModule } from '@angular/router';
import { NgbModal, NgbActiveModal, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import { SqlFilterQueryBuilderComponent } from '../../common/sql-filter-query-builder/sql-filter-query-builder.component';
import { Activity } from "../../_models/models";
import { DataTableTemplates } from "../../_enums/data-table-templates.enum";

import * as FileSaver from 'file-saver';

@Component({
  selector: 'app-initial-mailer',
  templateUrl: './initial-mailer.component.html',
  styleUrls: ['./initial-mailer.component.css']
})
export class InitialMailerComponent implements OnInit {

  orderCode: string;
  filterString: string = '';
  IncentiveRuleDetails = { count: 0, preruledescription: '', prerulename: '', postruledescription: '', postrulename: '' };
  scheduledDate: NgbDateStruct;
  scheduledTime: any;
  scheduleReminderoption: boolean = false;
  scheduleDateFlag: boolean = false;
  scheduleTimeFlag: boolean = false;

  gridData = {
    data: [],
    columnconfig: [
      { prop: 'CreatedOn', as: 'Generated On', cellTemplate: 9 },
      { prop: 'CreatedBy', as: 'Generated By' },
      { prop: 'MetaData', as: 'Scheduled Date', cellTemplate: DataTableTemplates.Custom, template: this.scheduleTemplate.bind(this) },
      { prop: 'FilterUsed', as: 'Filters Used' },
      { prop: 'RecordsGenerated', as: 'Records Generated' },
      { prop: 'Status', as: 'Status', cellTemplate: DataTableTemplates.WebJobStatus },
      { prop: 'download', as: 'Actions', cellClasses: 'anchor-text', cellTemplate: DataTableTemplates.Custom, template: this.downloadTemplate.bind(this) },
      { prop: 'downloadIncentive', as: 'Download Incentive Details', cellClasses: 'anchor-text', cellTemplate: 3 },
      { prop: 'DownloadHistory', as: 'Download History' }
    ],
    events: {
      rowClicked: this.gridRowClicked.bind(this)
    },
    settings: {
      search: true
    }
  };

  gridDataDistributionIncentives = {
    data: [],
    columnconfig: [
      { prop: 'Currency', as: 'Currency ($)' },
      { prop: 'TotalCount', as: 'Total n' },
      { prop: 'TotalSum', as: 'Total ' },
      { prop: 'PreCountN', as: 'Pre incentive count' },
      { prop: 'PreSum', as: 'Pre incentive amount' },
      { prop: 'PostCountN', as: 'Post incentive count' },
      { prop: 'PostSum', as: 'Post incentive amount' },
    ],
    events: {
      // rowClicked: this.gridRowClicked.bind(this)
    },
    settings: {
      search: false, csvDownload: true
    }
  };

  group = {
    rules: [{ "operator": "&&", "rules": [] }]
  }

  constructor(private router: Router, private orderService: OrdersService,
    private modalService: NgbModal) { }

  ngOnInit() {
    this.orderCode = this.orderService.GetOrderCode();
    if (!this.orderCode) {
      this.router.navigate(['/orders/overview']);
    } else
      this.Bind();
  }

  scheduleTemplate(row) {
    let result = "";
    if (row.MetaData) {
      let tempresult = JSON.parse(row.MetaData);
      if (tempresult.ScheduleDate == null || tempresult.ScheduleTime == null) {
        result = ""
      } else {
        let localDate = tempresult.ScheduleDate+"T"+tempresult.ScheduleTime+":00.000Z"
        let scheduleDate = new Date(localDate)
        result += scheduleDate;
      }
    }
    return result;
  }

  downloadTemplate(row) {
    if (row.Status == 7) {
      return '<i  class="fa fa-download ele-click"></i>';
    } else if (row.Status == 1){
      return '<i class="fa fa-times ele-click"></i>';
    } else {
      return "";
    }
  }
  gridRowClicked(ev, row, column) {
    if (column.prop == "download" && row.Status == 7) {
      this.orderService.DownloadMailer(this.orderCode, row['FileURL1']).subscribe(
        response => { FileSaver.saveAs(response, row['FileURL1']); this.UpdateActivity(row); },
        error => console.log(error)
      );
    }
    if (column.prop == "download" && row.Status == 1) {
      this.orderService.DeleteActivity(row.ID).subscribe(
        response => {
          console.log('as', response)
          this.Bind();
        },
        error => console.log(error)
    );
    }
    if (column.prop == "downloadIncentive") {
      this.orderService.DownloadMailerIncentiveDetails(this.orderCode, row['FileURL2']).subscribe(
        response => { FileSaver.saveAs(response, row['FileURL2']); },
        error => console.log(error)
      );
    }
  }

  Bind() {
    this.getMailerHistory();
    this.getIncentiveDistribution();
    this.getIncentiveRuleDetails();
  }

  getIncentiveDistribution() {
    this.orderService.GetIncentiveDistribution(this.orderCode, "initial", this.filterString).subscribe(
      response => {
        this.gridDataDistributionIncentives.data = response;
      },
      error => console.log(error)
    );
  }

  getIncentiveRuleDetails() {
    this.orderService.GetIncentiveRuleDetails(this.orderCode, "1", this.filterString).subscribe(
      response => { this.IncentiveRuleDetails = response; },
      error => console.log(error)
    );
  }

  getMailerHistory() {
    this.orderService.GetInitialMailerHistory(this.orderCode, "1").subscribe(
      response => { this.gridData.data = response; },
      error => console.log(error)
    );
  }

  // GenerateMailer() {
  //   this.orderService.GenerateMailer(this.orderCode, "1", JSON.stringify(this.filterString)).subscribe(
  //     response => { this.GenerateCsv(response); },
  //     error => console.log(error)
  //   );
  // }
  GenerateMailer() {
    this.scheduleReminderoption = false;
    let callObject = {
      Mailer: 1, DistributionTable: this.gridDataDistributionIncentives.data,
      FilterString: this.filterString
    };
    let user = JSON.parse(localStorage.getItem('currentUser'));
    this.orderService.SaveMailerRequest(this.orderCode, "1",user['username'], callObject).subscribe(response => {
      this.Bind();
    }, error => { })

  }

  GenerateCsv(mailFileNameGuid: string) {
    this.orderService.GenerateCsv(this.orderCode, "1", this.gridDataDistributionIncentives.data).subscribe(
      response => { this.InsertActivity(mailFileNameGuid, response); },
      error => console.log(error)
    );
  }

  InsertActivity(mailFileNameGuid: string, csvFileNameGuid: string) {
    var activity = new Activity();
    activity.ActivityType = 1;
    activity.FileURL1 = mailFileNameGuid;
    activity.FileURL2 = csvFileNameGuid;
    activity.FilterUsed = this.filterString;
    activity.OrderCode = this.orderCode;
    var user = JSON.parse(localStorage.getItem('currentUser'));
    activity.CreatedBy = user.username;
    activity.RecordsGenerated = this.IncentiveRuleDetails.count;

    this.orderService.InsertActivity(activity).subscribe(
      response => { this.filterString = ''; this.Bind(); },
      error => { console.log(error); }
    );
  }

  UpdateActivity(activity) {
    if (activity.DownloadHistory)
      activity.DownloadHistory += 'Downloaded By Admin;';
    else
      activity.DownloadHistory = 'Downloaded By Admin;';
    this.orderService.UpdateActivity(activity).subscribe(
      response => { this.Bind(); },
      error => { console.log(error); }
    );
  }

  ShowFilterPopup() {
    const modalRef = this.modalService.open(SqlFilterQueryBuilderComponent);
    this.orderService.GetFields(null, 2).subscribe(
      response => modalRef.componentInstance.fields = response,
      error => console.log(error)
    );
    modalRef.componentInstance.group = this.group;

    modalRef.result.then((result) => {
      this.group = result.group;
      this.filterString = JSON.parse(result.condition);
      this.Bind();
    });
  }

  scheduleToggle() {
    this.scheduleReminderoption = true;
  }

  scheduledGenerate() {
    if (this.scheduledTime === undefined ||
      this.scheduledDate === undefined) {
        if (this.scheduledTime === undefined) {
          this.scheduleTimeFlag = true
        } else {
          this.scheduleTimeFlag = false
        }
        if (this.scheduledDate === undefined) {
          this.scheduleDateFlag = true
        } else {
          this.scheduleDateFlag = false
        }
        return
  }
      this.scheduleDateFlag = false
      this.scheduleTimeFlag = false
      const hrs = this.scheduledTime.split(":")[0];
      const mins = this.scheduledTime.split(":")[1];
      const date = new Date(
        this.scheduledDate.year,
        this.scheduledDate.month - 1,
        this.scheduledDate.day,
        parseInt(hrs),
        parseInt(mins),
        0
      );

      const monthWithZero = date.getUTCMonth() + 1;
      const year = date.getUTCFullYear();
      const month = monthWithZero >= 10 ? monthWithZero : "0" + monthWithZero;
      const day =
        date.getUTCDate() >= 10 ? date.getUTCDate() : "0" + date.getUTCDate();
      const hh =
        date.getUTCHours() >= 10 ? date.getUTCHours() : "0" + date.getUTCHours();
      const min =
        date.getUTCMinutes() >= 10
          ? date.getUTCMinutes()
          : "0" + date.getUTCMinutes();

      const filterDate = `${year}-${month}-${day}`
      const filterTime = `${hh}:${min}`
      let callObject = {
        Mailer: 1,
        DistributionTable: this.gridDataDistributionIncentives.data,
        FilterString: this.filterString,
        ScheduleDate: filterDate,
        ScheduleTime: filterTime,
      };
      let user = JSON.parse(localStorage.getItem("currentUser"));
      console.log(callObject, user)
      this.orderService
        .SaveMailerRequest(
          this.orderCode,
          "1",
          user["username"],
          callObject
        )
        .subscribe(
          (response) => {
            this.Bind();
          },
          (error) => {}
        );
  }
}
