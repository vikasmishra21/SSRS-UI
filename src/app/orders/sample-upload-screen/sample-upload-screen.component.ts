import { Component, OnInit } from '@angular/core';
import { NgbModal, NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { UploadSampleComponent } from "../upload-sample/upload-sample.component";
import { Router, RouterModule } from '@angular/router';
import { OrdersService } from "../../_services/orders.service";
import { DataTableTemplates } from "../../_enums/data-table-templates.enum";
@Component({
  selector: 'app-sample-upload-screen',
  templateUrl: './sample-upload-screen.component.html',
  styleUrls: ['./sample-upload-screen.component.css']
})
export class SampleUploadScreenComponent implements OnInit {

  orderCode: string = '';
  dummyDataCount: number;
  gridData = {
    data: [],
    columnconfig: [
      { prop: 'CreatedOn', as: 'Generated On', cellTemplate: 9 },
      { prop: 'CreatedBy', as: 'Generated By' },
      { prop: 'RecordsGenerated', as: 'Expected Records' },
      { prop: 'IsTest', as: 'Is Dummy' },
      { prop: 'Status', as: 'Request Status', cellTemplate: DataTableTemplates.WebJobStatus },
      { prop: 'MetaData', as: 'Validation Result', cellTemplate: DataTableTemplates.Custom, template: this.resultTemplate.bind(this) },
      { prop: 'action', as: 'Confirm Upload', cellClasses: 'anchor-text', cellTemplate: DataTableTemplates.Custom, template: this.ConfirmuploadTemplate.bind(this) },
    ],
    events: {
      rowClicked: this.gridRowClicked.bind(this)
    },
    settings: {
      search: false
    }
  };

  constructor(private modalService: NgbModal,
    private router: Router, private orderService: OrdersService) { }

  ngOnInit() {
    this.orderCode = this.orderService.GetOrderCode();
    if (!this.orderCode) {
      this.router.navigate(['/orders/overview']);
    } else {
      this.BindGrid();
    }
  }
  ConfirmuploadTemplate(row) {
    if (row.Status == 3) {
      return '<i  class="fa fa-play-circle ele-click"></i>';
    } else
      return "";
  }
  resultTemplate(row) {
    let result = "";
    if (row.MetaData) {
      let tempresult = JSON.parse(row.MetaData);
      result += "FileType : " + tempresult.ValidatingFileType;
      result += "<br/>Records : " + tempresult.ValidatingRecordCount;
      result += "<br/>IFactor : " + tempresult.ValidatingIfactor;
    }
    return result;
  }

  gridRowClicked(event, row, column) {
    if (column.prop == "action" && row.Status == 3) {
      this.orderService.ConfirmSampleUpload(this.orderCode, row.UniqueId, row.FileType, row.RecordsGenerated).subscribe(
        response => {
          this.BindGrid();
        },
        error => { console.log(error) }
      );
      console.log(event, row);
    }
  }
  BindGrid() {
    this.orderService.GetInitialMailerHistory(this.orderCode, "7").subscribe(
      response => { this.gridData.data = response; console.log(response); },
      error => console.log(error)
    );
  }


  OpenUploadSampleModal() {
    const modalRef = this.modalService.open(UploadSampleComponent, { size: "sm" }).result.then((result) => {
      this.BindGrid();
    }, (reason) => {
      console.log(reason);
    });
  }

  GenerateDummyData(): void {
    if (!this.dummyDataCount || isNaN(this.dummyDataCount))
      alert('Enter a valid number in field');
    else {
      let user = JSON.parse(localStorage.getItem('currentUser'));

      this.orderService.GenerateMailerDummyData(this.dummyDataCount, this.orderCode,user['username']).subscribe(resp => { this.BindGrid(); }, err => { })
    }
  }
}
