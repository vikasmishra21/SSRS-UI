import { Component, OnInit } from "@angular/core";
import { OrdersService } from "../../_services/orders.service";
import { Router, RouterModule } from "@angular/router";
import {
  NgbModal,
  NgbActiveModal,
  NgbDateStruct,
} from "@ng-bootstrap/ng-bootstrap";
import { SqlFilterQueryBuilderComponent } from "../../common/sql-filter-query-builder/sql-filter-query-builder.component";
import { Activity } from "../../_models/models";
import { DataTableTemplates } from "../../_enums/data-table-templates.enum";

import * as FileSaver from "file-saver";
@Component({
  selector: "app-reminder-mailer",
  templateUrl: "./reminder-mailer.component.html",
  styleUrls: ["./reminder-mailer.component.css"],
})
export class ReminderMailerComponent implements OnInit {
  orderCode: string;
  filterString: string = "";
  IncentiveRuleDetails = {
    count: 0,
    preruledescription: "",
    prerulename: "",
    postruledescription: "",
    postrulename: "",
  };
  ReminderType = "reminder1";
  IsReminder2Set: boolean = true;
  scheduledDate: NgbDateStruct;
  scheduledTime: any;
  scheduleReminderoption: boolean = false;
  scheduleDateFlag: boolean = false;
  scheduleTimeFlag: boolean = false;

  gridData = {
    data: [],
    columnconfig: [
      { prop: "CreatedOn", as: "Generated On", cellTemplate: 9 },
      { prop: "CreatedBy", as: "Generated By" },
      { prop: 'MetaData', as: 'Scheduled Date', cellTemplate: DataTableTemplates.Custom, template: this.scheduleTemplate.bind(this) },
      { prop: "FilterUsed", as: "Filters Used" },
      { prop: "RecordsGenerated", as: "Records Generated" },
      {
        prop: "Status",
        as: "Status",
        cellTemplate: DataTableTemplates.WebJobStatus,
      },
      {
        prop: "download",
        as: "Actions",
        cellClasses: "anchor-text",
        cellTemplate: DataTableTemplates.Custom,
        template: this.downloadTemplate.bind(this),
      },
      {
        prop: "downloadIncentive",
        as: "Download Incentive Details",
        cellClasses: "anchor-text",
        cellTemplate: 3,
      },
      { prop: "DownloadHistory", as: "Download History" },
    ],
    events: {
      rowClicked: this.gridRowClicked.bind(this),
    },
    settings: {
      search: true,
    },
  };

  gridDataDistributionIncentives = {
    data: [],
    columnconfig: [
      { prop: "Currency", as: "Currency ($)" },
      { prop: "TotalCount", as: "Total n" },
      { prop: "TotalSum", as: "Total " },
      { prop: "PreCountN", as: "Pre incentive count" },
      { prop: "PreSum", as: "Pre incentive amount" },
      { prop: "PostCountN", as: "Post incentive count" },
      { prop: "PostSum", as: "Post incentive amount" },
    ],
    events: {
      // rowClicked: this.gridRowClicked.bind(this)
    },
    settings: {
      search: false,
      csvDownload: true,
    },
  };

  group = {
    rules: [{ operator: "&&", rules: [] }],
  };

  constructor(
    private router: Router,
    private orderService: OrdersService,
    private modalService: NgbModal
  ) {}

  ngOnInit() {
    this.orderCode = this.orderService.GetOrderCode();
    if (!this.orderCode) {
      this.router.navigate(["/orders/overview"]);
    } else this.Bind();
  }

  downloadTemplate(row) {
    if (row.Status == 7) {
      return '<i  class="fa fa-download ele-click"></i>';
    } else if (row.Status == 1){
      return '<i class="fa fa-times ele-click"></i>';
    } else {
      return "";
    }
  }

  scheduleTemplate(row) {
    let result = "";
    if (row.MetaData) {
      let tempresult = JSON.parse(row.MetaData);
      if (tempresult.ScheduleDate == null || tempresult.ScheduleTime == null) {
        result = ""
      } else {
        let localDate = tempresult.ScheduleDate+"T"+tempresult.ScheduleTime+":00.000Z"
        let scheduleDate = new Date(localDate)
        result += scheduleDate;
      }
    }
    return result;
  }


  gridRowClicked(ev, row, column) {
    if (column.prop == "download" && row.Status == 7) {
      this.orderService
        .DownloadMailer(this.orderCode, row["FileURL1"])
        .subscribe(
          (response) => {
            FileSaver.saveAs(response, row["FileURL1"]);
            this.UpdateActivity(row);
          },
          (error) => console.log(error)
        );
      console.log(row);
    }
    if (column.prop == "download" && row.Status == 1) {
      this.orderService.DeleteActivity(row.ID).subscribe(
        response => {
          console.log('as', response)
          this.UpdateActivity(row);
        },
        error => console.log(error)
    );
    }
    if (column.prop == "downloadIncentive") {
      this.orderService
        .DownloadMailerIncentiveDetails(this.orderCode, row["FileURL2"])
        .subscribe(
          (response) => {
            FileSaver.saveAs(response, row["FileURL2"]);
          },
          (error) => console.log(error)
        );
      console.log(row);
    }
  }

  ChangeReminder() {
    this.filterString = "";
    this.group = {
      rules: [{ operator: "&&", rules: [] }],
    };
    this.Bind();
  }

  Bind() {
    this.getMailerHistory();
    this.getIncentiveDistribution();
    this.getIncentiveRuleDetails();
    this.ShowHideReminder2();
  }

  getIncentiveDistribution() {
    this.orderService
      .GetIncentiveDistribution(
        this.orderCode,
        this.ReminderType,
        this.filterString
      )
      .subscribe(
        (response) => {
          this.gridDataDistributionIncentives.data = response;
          console.log(response);
        },
        (error) => console.log(error)
      );
  }

  getIncentiveRuleDetails() {
    let mailerType = this.ReminderType == "reminder1" ? "2" : "3";
    this.orderService
      .GetIncentiveRuleDetails(this.orderCode, mailerType, this.filterString)
      .subscribe(
        (response) => {
          this.IncentiveRuleDetails = response;
        },
        (error) => console.log(error)
      );
  }

  getMailerHistory() {
    let mailerType = this.ReminderType == "reminder1" ? "2" : "3";
    this.orderService
      .GetInitialMailerHistory(this.orderCode, mailerType)
      .subscribe(
        (response) => {
          this.gridData.data = response;
          console.log(response);
        },
        (error) => console.log(error)
      );
  }

  // GenerateMailer() {
  //     let mailerType = (this.ReminderType == 'reminder1') ? "2" : "3";
  //     this.orderService.GenerateMailer(this.orderCode, mailerType, JSON.stringify(this.filterString)).subscribe(
  //         response => { this.GenerateCsv(response); console.log(response); },
  //         error => console.log(error)
  //     );
  // }
  GenerateMailer() {
    this.scheduleReminderoption = false;
    let mailerType = this.ReminderType == "reminder1" ? "2" : "3";
    let callObject = {
      Mailer: mailerType,
      DistributionTable: this.gridDataDistributionIncentives.data,
      FilterString: this.filterString,
    };
    let user = JSON.parse(localStorage.getItem("currentUser"));
    this.orderService
      .SaveMailerRequest(
        this.orderCode,
        mailerType,
        user["username"],
        callObject
      )
      .subscribe(
        (response) => {
          this.Bind();
        },
        (error) => {}
      );
  }

  GenerateCsv(mailFileNameGuid: string) {
    let mailerType = this.ReminderType == "reminder1" ? "2" : "3";
    this.orderService
      .GenerateCsv(
        this.orderCode,
        mailerType,
        this.gridDataDistributionIncentives.data
      )
      .subscribe(
        (response) => {
          this.InsertActivity(mailFileNameGuid, response);
          console.log(response);
        },
        (error) => console.log(error)
      );
  }

  InsertActivity(mailFileNameGuid: string, csvFileNameGuid: string) {
    var activity = new Activity();
    activity.ActivityType = this.ReminderType == "reminder1" ? 2 : 3;
    activity.FileURL1 = mailFileNameGuid;
    activity.FileURL2 = csvFileNameGuid;
    activity.FilterUsed = this.filterString;
    activity.OrderCode = this.orderCode;
    activity.RecordsGenerated = this.IncentiveRuleDetails.count;
    var user = JSON.parse(localStorage.getItem("currentUser"));
    activity.CreatedBy = user.username;
    this.orderService.InsertActivity(activity).subscribe(
      (response) => {
        this.Bind();
      },
      (error) => {
        console.log(error);
      }
    );
  }
  UpdateActivity(activity) {
    if (activity.DownloadHistory)
      activity.DownloadHistory += "Downloaded By Admin;";
    else activity.DownloadHistory = "Downloaded By Admin;";
    this.orderService.UpdateActivity(activity).subscribe(
      (response) => {
        this.Bind();
      },
      (error) => {
        console.log(error);
      }
    );
  }

  ShowFilterPopup() {
    const modalRef = this.modalService.open(SqlFilterQueryBuilderComponent);
    this.orderService.GetFields(null, 2).subscribe(
      (response) => (modalRef.componentInstance.fields = response),
      (error) => console.log(error)
    );
    modalRef.componentInstance.group = this.group;

    modalRef.result.then((result) => {
      this.group = result.group;
      this.filterString = JSON.parse(result.condition);
      this.Bind();
    });
  }

  ShowHideReminder2() {
    this.orderService.GetOrder(this.orderCode).subscribe(
      (response) => {
        this.IsReminder2Set =
          response.PreIncentiveRuleID_Reminder2 != 0 &&
          response.PreIncentiveRuleID_Reminder2 != 0;
        console.log(response);
      },
      (error) => {}
    );
  }

  scheduleToggle() {
    this.scheduleReminderoption = true;
  }

  scheduledGenerate() {
    if (this.scheduledTime === undefined ||
      this.scheduledDate === undefined) {
        if (this.scheduledTime === undefined) {
          this.scheduleTimeFlag = true
        } else {
          this.scheduleTimeFlag = false
        }
        if (this.scheduledDate === undefined) {
          this.scheduleDateFlag = true
        } else {
          this.scheduleDateFlag = false
        }
        return
  }
      this.scheduleDateFlag = false
      this.scheduleTimeFlag = false
      const hrs = this.scheduledTime.split(":")[0];
      const mins = this.scheduledTime.split(":")[1];
      const date = new Date(
        this.scheduledDate.year,
        this.scheduledDate.month - 1,
        this.scheduledDate.day,
        parseInt(hrs),
        parseInt(mins),
        0
      );

      const utcValue = date.toUTCString();
      console.log("original date", this.scheduledDate);
      console.log("original time", this.scheduledTime);
      console.log("date obj", date);
      console.log("utcValue", utcValue);
      console.log(
        date.getUTCDate(),
        date.getUTCFullYear(),
        date.getUTCMonth(),
        date.getUTCHours(),
        date.getUTCMinutes()
      );
      // scheduledate=2020-06-08&scheduletime=18:10
      const monthWithZero = date.getUTCMonth() + 1;
      const year = date.getUTCFullYear();
      const month = monthWithZero >= 10 ? monthWithZero : "0" + monthWithZero;
      const day =
        date.getUTCDate() >= 10 ? date.getUTCDate() : "0" + date.getUTCDate();
      const hh =
        date.getUTCHours() >= 10 ? date.getUTCHours() : "0" + date.getUTCHours();
      const min =
        date.getUTCMinutes() >= 10
          ? date.getUTCMinutes()
          : "0" + date.getUTCMinutes();

      const query = `scheduledate=${year}-${month}-${day}&scheduletime=${hh}:${min}`;
      console.log("sfsd", query);

      let mailerType = this.ReminderType == "reminder1" ? "2" : "3";
      const filterDate = `${year}-${month}-${day}`
      const filterTime = `${hh}:${min}`
      let callObject = {
        Mailer: mailerType,
        DistributionTable: this.gridDataDistributionIncentives.data,
        FilterString: this.filterString,
        ScheduleDate: filterDate,
        ScheduleTime: filterTime,
      };
      let user = JSON.parse(localStorage.getItem("currentUser"));
      this.orderService
        .SaveMailerRequest(
          this.orderCode,
          mailerType,
          user["username"],
          callObject
        )
        .subscribe(
          (response) => {
            this.Bind();
          },
          (error) => {}
        );
  }
}
